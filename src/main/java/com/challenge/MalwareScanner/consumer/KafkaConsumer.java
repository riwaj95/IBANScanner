package com.challenge.MalwareScanner.consumer;

import com.challenge.MalwareScanner.core.ContentExtractorControl;
import com.challenge.MalwareScanner.core.PdfProcessingException;
import com.challenge.MalwareScanner.model.CheckEvent;
import com.challenge.MalwareScanner.model.CheckResultEvent;
import com.challenge.MalwareScanner.model.StateEnum;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.net.URL;

@Service
public class KafkaConsumer {

    @Autowired
    private KafkaTemplate<String, CheckResultEvent> kafkaTemplate;

    private static final String[] BLACKLISTED_IBANS = {"UU33", "DE232ÃŸ"};

    @Autowired
    private ContentExtractorControl contentExtractorControl;

    @KafkaListener(topics = "check-events-topic", groupId = "group-id")
    public void consumeCheckEvent(CheckEvent checkEvent) throws PdfProcessingException {
        CheckResultEvent checkResultEvent = scanPdf(checkEvent);

        // Sending the result to another Kafka topic.
        kafkaTemplate.send("check-results-topic", checkResultEvent);
    }

    public CheckResultEvent scanPdf(CheckEvent checkEvent) throws PdfProcessingException {
        CheckResultEvent checkResultEvent = new CheckResultEvent();
        checkResultEvent.setName(checkResultEvent.getName());

        try {
            // Extract PDF content using ContentExtractor.
            String pdfContent = contentExtractorControl.extractContent(new URL(checkEvent.getUrl()).openStream());

            // Perform IBAN blacklisting check on the extracted pdf content.
            boolean isBlacklisted = isIbanBlacklisted(pdfContent);

            if (isBlacklisted) {
                checkResultEvent.setState(StateEnum.SUSPICIOUS);
                checkResultEvent.setDetails("Blacklisted IBAN found in the document.");
            } else {
                checkResultEvent.setState(StateEnum.OK);
                checkResultEvent.setDetails("No blacklisted IBANs found.");
            }
        } catch (IOException ex) {
            checkResultEvent.setState(StateEnum.ERROR);
            checkResultEvent.setDetails("Error parsing PDF");
            throw new PdfProcessingException("Error parsing PDF", ex);
        }

        return checkResultEvent;
    }

    private boolean isIbanBlacklisted(String pdfContent) {
        for (String blacklistedIBAN : BLACKLISTED_IBANS) {
            if (pdfContent.contains(blacklistedIBAN)) {
                return true;
            }
        }
        return false;
    }

}
