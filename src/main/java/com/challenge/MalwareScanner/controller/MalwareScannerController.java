package com.challenge.MalwareScanner.controller;

import com.challenge.MalwareScanner.model.CheckEvent;
import com.challenge.MalwareScanner.producer.KafkaProducer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

@RestController
@RequestMapping("/api/scan")
@Validated
public class

MalwareScannerController {


    private final KafkaProducer kafkaProducer;

    @Autowired
    public MalwareScannerController(KafkaProducer kafkaProducer) {
        this.kafkaProducer = kafkaProducer;
    }


    @PostMapping("/upload")
    public ResponseEntity<String> uploadFile(@RequestParam("file") MultipartFile file) throws IOException {
        if (file.isEmpty()) {
            return ResponseEntity.badRequest().body("No file uploaded");
        }
        CheckEvent checkEvent = new CheckEvent();
        String url = saveFile(file);
        checkEvent.setUrl(url);
        checkEvent.setFileType(file.getContentType());

        kafkaProducer.sendCheckEvent(checkEvent);

        return ResponseEntity.ok("File uploaded and check event sent to the topic");
    }

    private String saveFile(MultipartFile file) throws IOException {
        String fileName = System.currentTimeMillis() + "_" + file.getOriginalFilename();
        Path directoryPath = Paths.get("uploads").toAbsolutePath().normalize();
        Files.createDirectories(directoryPath);

        Path filePath = directoryPath.resolve(fileName);
        Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);
        return filePath.toUri().toString();
    }

}